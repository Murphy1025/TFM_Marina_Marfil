<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Etapa1" Id="{b474cdd3-f1ed-4c82-b281-0c95ac49b254}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Etapa1
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	
	//Accionar_Push_1 				: BOOL 	:= FALSE;	
	Contador_Linea_Principal 		: INT 	:= -1; // piezas que han entrado en la línea principal
	Contador_Sensor_Zona_Metal 		: INT 	:= 0; // piezas que pasan por el sensor de la linea metálica
	Contador_Sensor_Zona_Verde 		: INT 	:= 0; // piezas que pasan por el sensor de la linea verde
	Posicion_Array_Azul 			: INT 	:= -1; // posición a consultar para accionar el pusher azul	
	Pieza 							: DINT 	:= 0; // Tipo de elemento que pasa por el sensor de vision
	Piezas_Entrada 					: ARRAY[0..4] OF DINT := [4(0)]; // array que guarda la información de los elementos que hay entre el pusher 1 y 2
	Piezas_Zona_Metal				: ARRAY[0..10] OF DINT := [10(0)]; // array que guarda la información de los elementos que hay entre el pusher 2 y 3
	Posicion_Array_Metal			: INT 	:= 0; // posición a consultar para accionar el pusher verde	
	Posicion_Array_Verde			: INT 	:= 0; // posición a consultar para accionar el pusher metálico	
		
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// ---------------------------------------------------------------- 1. PIVOT ARM ENTRADA ----------------------------------------------------------------

// Control para tumbar las piezas. Esta parte funcionará si hay piezas en la cinta. Dependiendo de la orientación y posición, es posible que el objeto se quede "estancado" debajo del Pivot, este caso se
// reconocerá cuando los sensores de entrada y salida detecten objetos a la vez, ya que el tiempo de emisión está diseñado para que no tengan que coincidir. Cuando esto sucede, de invertirá el 
// sentido de giro para "desatascar" la pieza. En caso contrario, se mantiene el giro predefinido.

 GVL.Pivot_Arm_Sorter_1_Belt_mas := GVL.Contador_Piezas_Zona_Pivot_Principal >0 AND NOT ( GVL.Diffuse_Sensor_0 AND GVL.Diffuse_Sensor_1);
 GVL.Pivot_Arm_Sorter_1_Belt_menos := GVL.Contador_Piezas_Zona_Pivot_Principal >0 AND GVL.Diffuse_Sensor_0 AND GVL.Diffuse_Sensor_1;

// ---------------------------------------------------------------- 2. CONTROL DESCARTE Y RELLENO DEL ARRAY----------------------------------------------------------------
 
// Si las líneas de entrada no aceptan más piezas, se descartan las pezas de color
IF GVL.Contador_Pivot_Azul>=3 THEN GVL.Input[0].Descartar_Pieza_Azul := TRUE; ELSE GVL.Input[0].Descartar_Pieza_Azul := FALSE; END_IF
IF GVL.Contador_Pivot_Verde>=3 THEN GVL.Input[0].Descartar_Pieza_Verde := TRUE; ELSE GVL.Input[0].Descartar_Pieza_Verde := FALSE; END_IF
IF GVL.Contador_Pivot_Metal>=3 THEN GVL.Input[0].Descartar_Pieza_Metal := TRUE; ELSE GVL.Input[0].Descartar_Pieza_Metal := FALSE; END_IF

// Control para descartar las piezas: he tenido que meter un control porque dependiendo de la longitud, el sensor deja de leer antes de que 
//la pieza acabe de pasar ya que lee en el centro de la pieza y si esta es muy larga el centro sale antes de que acabe de salir la pieza  
IF POU_Edges.Rasing_Edge_Sensor_Zona_Azul.Q THEN 
	Contador_Linea_Principal:=Contador_Linea_Principal+1;
	Piezas_Entrada[Contador_Linea_Principal MOD 4]:= GVL.Vision_Sensor_1; ;	
END_IF

// ---------------------------------------------------------------- 3. PUSHER AZUL ----------------------------------------------------------------
//El push se acciona si la pieza que tiene colocada delante es azul
IF POU_Edges.Falling_edge_sensor_zona_azul.Q THEN
	Posicion_Array_Azul:=Posicion_Array_Azul+1;
	IF Piezas_Entrada[Posicion_Array_Azul MOD 4] = 1 AND NOT GVL.Input[0].Descartar_Pieza_Azul THEN 
		GVL.Pusher_1 := TRUE;
	END_IF
END_IF
    
IF GVL.Pusher_1_Front_Limit THEN GVL.Pusher_1 := FALSE; END_IF

// ---------------------------------------------------------------- 4. PUSHER VERDE----------------------------------------------------------------
//El push se acciona si la pieza que tiene colocada delante es verde
IF POU_Edges.Falling_edge_sensor_zona_verde.Q THEN
	  Contador_Sensor_Zona_Verde := Contador_Sensor_Zona_Verde+1;	
	  Posicion_Array_Verde := Contador_Sensor_Zona_Verde + GVL.Contador_Totales_Azul_Separadas;
	  Posicion_Array_Metal := Contador_Sensor_Zona_Verde - GVL.Contador_Totales_Verde_Separadas;
	IF Piezas_Entrada[(Posicion_Array_Verde-1)MOD 4] = 4 AND NOT GVL.Input[0].Descartar_Pieza_Verde THEN 
		GVL.Pusher_2 := TRUE;
	ELSE Piezas_Zona_Metal [(Posicion_Array_Metal-1) MOD 10] := Piezas_Entrada[(Posicion_Array_Verde-1)MOD 4]; // Si la pieza no es verde, de envia el valor al array destinado al push para piezas metálicas
	END_IF
END_IF
    
IF GVL.Pusher_2_Front_Limit THEN GVL.Pusher_2 := FALSE; END_IF

// ---------------------------------------------------------------- 5. PUSHER METAL----------------------------------------------------------------
//El push se acciona si la pieza que tiene colocada delante es verde
IF POU_Edges.Falling_edge_sensor_zona_metal.Q THEN
		Contador_Sensor_Zona_Metal := Contador_Sensor_Zona_Metal+1;
	IF Piezas_Zona_Metal[(Contador_Sensor_Zona_Metal-1) MOD 10] = 7 AND NOT GVL.Input[0].Descartar_Pieza_Metal THEN 
		GVL.Pusher_3 := TRUE;
	END_IF
	
END_IF
    
IF GVL.Pusher_3_Front_Limit THEN GVL.Pusher_3 := FALSE; END_IF

]]></ST>
    </Implementation>
    <LineIds Name="Etapa1">
      <LineId Id="248" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="245" Count="2" />
      <LineId Id="249" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="361" Count="1" />
      <LineId Id="460" Count="4" />
      <LineId Id="480" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="488" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="505" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="512" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="118" Count="1" />
      <LineId Id="387" Count="2" />
      <LineId Id="503" Count="0" />
      <LineId Id="391" Count="2" />
      <LineId Id="514" Count="0" />
      <LineId Id="394" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="108" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>